// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3853.Pridetronics2018;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.SerialPort;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.TimedRobot;

import com.ctre.phoenix.motorcontrol.can.TalonSRX;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.Faults;
import com.ctre.phoenix.motorcontrol.InvertType;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

//import com.kauailabs.navx.frc.AHRS;
//import com.kauailabs.navx.frc.AHRS.SerialDataType;

import edu.wpi.first.wpilibj.Compressor;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
  // public static SpeedController driveleftDriveMotor;
  // public static SpeedController driverightDriveMotor;
  public static WPI_TalonSRX leftDriveMotorLead; // Creates new talon motor for leading left drive
  public static WPI_TalonSRX leftDriveMotorFollow; // Creates new talon motor for following left drive
  public static WPI_TalonSRX rightDriveMotorLead; // Creates new talon motor for leading right drive
  public static WPI_TalonSRX rightDriveMotorFollow; // Creates new talon motor for following right drive

  public static DifferentialDrive driverobotDrive;

  public static Encoder driveleftDriveEncoder;
  public static Encoder driverightDriveEncoder;

  public static SpeedController clawintakeMotor;
  public static SpeedController liftMotor;

  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
  // public static Compressor pneuCompressor;

  public static SpeedController climbMotor;
  public static DoubleSolenoid pneumaticsDoubleSolenoid1;
  public static DoubleSolenoid pneumaticsDoubleSolenoid2;

  public static DigitalInput limitSwitchLift;
  // public static AHRS ahrs;
  public static PowerDistributionPanel mPdp;

  public static void init() {
    mPdp = new PowerDistributionPanel();

    // ahrs = new AHRS(SerialPort.Port.kMXP, SerialDataType.kProcessedData, (byte)
    // 200);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    leftDriveMotorLead = new WPI_TalonSRX(0);
    LiveWindow.addActuator("Drive", "leftDriveMotor", (WPI_TalonSRX) leftDriveMotorLead);
    leftDriveMotorLead.setInverted(true);

    leftDriveMotorFollow = new WPI_TalonSRX(1); // Assigns Following Left Drive Motor to Talon #1
    leftDriveMotorFollow.setInverted(true); // Inverts Following Left Drive Motor

    // Makes the Following Left Drive Motor to follow the Leading left Drive Motor
    leftDriveMotorFollow.follow(leftDriveMotorLead);

    rightDriveMotorLead = new WPI_TalonSRX(2);
    LiveWindow.addActuator("Drive", "rightDriveMotor", (WPI_TalonSRX) rightDriveMotorLead);
    rightDriveMotorLead.setInverted(true);

    rightDriveMotorFollow = new WPI_TalonSRX(3); // Assigns Following Right Drive Motor to Talon #3
    rightDriveMotorFollow.setInverted(true); // Inverts Following Left Drive Motor

    // Makes the Following Right Drive Motor to follow the Leading Right Drive Motor
    rightDriveMotorFollow.follow(rightDriveMotorLead);

    driverobotDrive = new DifferentialDrive(leftDriveMotorLead, rightDriveMotorLead);
    LiveWindow.addActuator("Drive", "robotDrive", driverobotDrive);
    driverobotDrive.setSafetyEnabled(true);

    driverobotDrive.setExpiration(0.1);
    driverobotDrive.setMaxOutput(1.0);

    driveleftDriveEncoder = new Encoder(7, 6, false, EncodingType.k1X);
    LiveWindow.addSensor("Drive", "leftDriveEncoder", driveleftDriveEncoder);
    driveleftDriveEncoder.setDistancePerPulse((6 * Math.PI) / 360);
    driveleftDriveEncoder.setPIDSourceType(PIDSourceType.kDisplacement);
    driveleftDriveEncoder.setReverseDirection(true);

    driverightDriveEncoder = new Encoder(9, 8, false, EncodingType.k1X);
    LiveWindow.addSensor("Drive", "rightDriveEncoder", driverightDriveEncoder);
    driverightDriveEncoder.setDistancePerPulse((6 * Math.PI) / 360);
    driverightDriveEncoder.setPIDSourceType(PIDSourceType.kDisplacement);
    driverightDriveEncoder.setReverseDirection(false);

    clawintakeMotor = new Spark(3);
    LiveWindow.addActuator("Claw", "intakeMotor", (Spark) clawintakeMotor);
    clawintakeMotor.setInverted(false);

    liftMotor = new Spark(2);
    LiveWindow.addActuator("Lift", "liftMotor", (Spark) liftMotor);
    liftMotor.setInverted(false);

    climbMotor = new Spark(5);
    LiveWindow.addActuator("Climb", "climbMotor", (Spark) climbMotor);

    pneumaticsDoubleSolenoid1 = new DoubleSolenoid(1, 0);
    LiveWindow.addActuator("Pneumatics", "Climb Brake Solenoid 1", pneumaticsDoubleSolenoid1);

    pneumaticsDoubleSolenoid2 = new DoubleSolenoid(2, 3);
    LiveWindow.addActuator("Pneumatics", "Claw Solenoid 2", pneumaticsDoubleSolenoid2);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    limitSwitchLift = new DigitalInput(5);

    // pneuCompressor = new Compressor(0);
    // LiveWindow.addActuator("Pneu", "Compressor", pneuCompressor);

    // pneumaticsDoubleSolenoid1 = new DoubleSolenoid(0, 1);
    // LiveWindow.addActuator("Pneu", "ClawSolenoid", pneumaticsDoubleSolenoid1);

  }
}
