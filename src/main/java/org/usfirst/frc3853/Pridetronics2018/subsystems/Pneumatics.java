// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3853.Pridetronics2018.subsystems;

import org.usfirst.frc3853.Pridetronics2018.Robot;
import org.usfirst.frc3853.Pridetronics2018.RobotMap;
import org.usfirst.frc3853.Pridetronics2018.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.DoubleSolenoid;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Pneumatics extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final DoubleSolenoid doubleSolenoid1 = RobotMap.pneumaticsDoubleSolenoid1;
    private final DoubleSolenoid doubleSolenoid2 = RobotMap.pneumaticsDoubleSolenoid2;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Pneumatics() {
      
      //default state is off
      RobotMap.pneumaticsDoubleSolenoid1.set(Value.kOff);
      RobotMap.pneumaticsDoubleSolenoid2.set(Value.kOff);
    }
    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }
    public void brakeOn() {
      doubleSolenoid1.set(Value.kForward);
    }
    public void brakeOff() {
      doubleSolenoid1.set(Value.kReverse);
    }
    public void brakeIdle() {
      doubleSolenoid1.set(Value.kOff);
    }
    
    public void pneuOpen(){
      doubleSolenoid2.set(Value.kForward);
      
    }
    public void pneuClose() {
      doubleSolenoid2.set(Value.kReverse);
    }
    public void pneuIdle() {
      doubleSolenoid2.set(Value.kOff);
    }
    /*public boolean isGrabbing() {
      boolean isGrabbing = doubleSolenoid1.get() == Value.kForward;
      return doubleSolenoid1;
    }*/
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

